{"version":3,"sources":["components/project/ProjectEdit.js","components/project/ProjectItem.js","components/project/SingleProjectLoader.js","components/project/ListProjectLoader.js","components/chat/index.js","components/chat/Chat.js","App.js","serviceWorker.js","index.js","logo.svg",".env.development"],"names":["ProjectEdit","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","description","inherits","createClass","key","value","_this2","axios","put","concat","_id","then","onProjectChanged","_this3","_this$state","react_default","a","createElement","type","onChange","e","setState","currentTarget","onClick","submitForm","bind","React","Component","ProjectItem","_ref","tasks","_ref$editable","editable","project","style","border","margin","className","length","map","task","i","ProjectEdit_ProjectEdit","assign","SingleProjectLoader","_Component","loading","getProject","url","console","log","get","res","data","catch","ProjectItem_ProjectItem","ListProjectLoader","projects","refetchAll","SingleProjectLoader_SingleProjectLoader","Chat","messages","input","socket","io","process","REACT_APP_API_URL","on","msg","receiveMessage","toConsumableArray","emit","timestamp","Date","now","padding","onKeyDown","keyCode","submitChat","App","chat_Chat","ListProjectLoader_ListProjectLoader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b93dad50.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport class ProjectEdit extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            title:props.title,\n            description:props.description\n        };\n    }\n\n    submitForm() {\n        axios.put(`http://localhost:3000/api/projects/${this.props._id}`, this.state)\n            .then( () => {\n                if(this.props.onProjectChanged){\n                    this.props.onProjectChanged();\n                }\n            })\n    }\n\n    render(){\n        let {title, description} = this.state;\n        // let title = this.state.title;\n        // let description = this.state.description;\n        return (\n            <div>\n                <label>Title</label>\n                <input type=\"text\" value={title} onChange={e=> this.setState({title:e.currentTarget.value})}/>\n                <label>Description</label>\n                <input type=\"text\" value={description} onChange={e=> this.setState({description:e.currentTarget.value})}/>\n                <button onClick={this.submitForm.bind(this)}>Edit this project</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { ProjectEdit } from './ProjectEdit';\n\nexport const ProjectItem = ({title, description, tasks, _id, editable=false, onProjectChanged}) => {\n    let project = {title, description, tasks, _id}\n    return (\n        <div style={{border:'1px solid red', margin:20}}>\n            <h1>Project: {title}</h1>\n            <p>Description: {description}</p>\n            <div className=\"tasks\">\n                {tasks.length > 0 ?\n                <ul>\n                    {tasks.map((task,i) => <li key={i}>{task}</li>)}\n                </ul>\n                :\n                <p>There are no pending tasks</p>\n                }\n            </div>\n            { editable && <ProjectEdit {...project} onProjectChanged={onProjectChanged}/> }\n        </div>\n    )\n}","import React,{Component} from 'react';\nimport axios from 'axios';\nimport { ProjectItem } from './ProjectItem';\n\nexport class SingleProjectLoader extends ComponentÂ {\n    constructor(props){\n        super(props);\n        this.state = {\n            project: props.project,\n            loading: props.project ? false : true\n        }\n    }\n    \n    componentWillMount(){\n        if(!this.state.project){\n            this.getProject();\n        }\n    }\n\n    getProject(){\n        let {_id} = this.state.project;\n        let url = `http://localhost:3000/api/projects/${_id}`;\n        console.log(url);\n        axios.get(url)\n             .then(res => {\n                 console.log(res.data);\n                 this.setState({project: res.data, loading: false});\n             })\n             .catch(e =>  console.log(\"EROOR PIDIENDO PROYECTO\"));\n    }\n\n    render(){\n        let {project, loading} = this.state;\n        if(!loading){\n            return <ProjectItem {...project} editable={this.props.editable} onProjectChanged={()=> this.getProject()}/>\n        }else{\n            return <p>Loading...</p>\n        }\n    }\n}\n\n","import React,{Component} from 'react';\nimport axios from 'axios';\nimport { ProjectItem } from './ProjectItem';\nimport { SingleProjectLoader } from './SingleProjectLoader';\n\nexport class ListProjectLoader extends ComponentÂ {\n    constructor(){\n        super();\n        this.state = {\n            projects: null,\n            loading: true\n        }\n    }\n    \n    componentWillMount(){\n        this.refetchAll();\n    }\n\n    refetchAll(){\n        let url = `http://localhost:3000/api/projects/`;\n        console.log(url);\n        axios.get(url)\n             .then(res => {\n                 console.log(res.data);\n                 this.setState({projects: res.data, loading: false});\n             })\n             .catch(e =>  console.log(\"EROOR PIDIENDO PROYECTO\"));\n    }\n\n    render(){\n        let {projects, loading} = this.state;\n        if(!loading){\n            return (\n                <div>\n                    <button onClick={()=> this.refetchAll()}>Reload projects</button>\n                    {projects.map(project => (\n                        <SingleProjectLoader \n                            key={project._id} \n                            project={project}\n                            editable \n                            />\n                    ))}\n                </div>\n            )\n        }else{\n            return <p>Loading...</p>\n        }\n    }\n}\n\n","import {Chat as x} from './Chat';\n\nexport const Chat = x;\n","import React from 'react';\nimport io from 'socket.io-client';\nimport './chat.css';\nimport environment from \"../../.env.development\";\n\n\nexport class Chat extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n            messages:[],\n            input:''\n        }\n    }\n\n    componentDidMount(){\n        this.socket = io(process.env.REACT_APP_API_URL);\n\n        this.socket.on('message', (msg)=> {\n            this.receiveMessage(msg.msg);\n        });\n    }\n\n    receiveMessage(msg){\n        this.setState({\n            input:'',\n            messages: [...this.state.messages, {msg,type:\"server\"}]\n        })\n    }\n\n\n    submitChat(){\n        let msg = this.state.input;\n        this.setState({\n            input:'',\n            messages: [...this.state.messages, {msg,type:\"me\"}]\n        });\n        this.socket.emit('message',{msg, timestamp:Date.now()})\n    }\n    \n    render(){\n        let {messages, input} = this.state;\n        return (\n            <div style={{border:'1px solid green', padding:'10px'}} onKeyDown={e => e.keyCode==13 ? this.submitChat():null}>\n                <div className=\"messages\">\n                    {messages.map( (e,i) => <div className={\"msg \"+e.type} key={i}><div className=\"wrap\">{e.msg}</div></div>)}\n                </div>\n                <input value={input} onChange={e => this.setState({input:e.currentTarget.value})}/>\n            </div>\n            )\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ListProjectLoader } from './components/project/ListProjectLoader';\nimport {Chat} from './components/chat';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat/>\n        <ListProjectLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/.env.6d6d9723.development\";"],"sourceRoot":""}